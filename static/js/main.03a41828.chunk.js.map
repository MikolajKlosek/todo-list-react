{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","_ref","addNewTask","newTaskContent","setNewTaskContent","useState","React","createElement","className","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","value","placeholder","onChange","_ref2","target","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","key","id","concat","done","onClick","content","Buttons","toggleHideDone","setAllDone","length","Fragment","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","getInitialTasks","tasksFromLocalStorage","localStorage","getItem","JSON","parse","App","setHideDone","setTasks","useEffect","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.03a41828.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\")\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n\r\n        addNewTask(trimmedNewTaskContent);\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                value={newTaskContent}\r\n                className=\"form__input\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <button className=\"form__button\">Dodaj zadanie</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <ul className=\"tasks\">\r\n        {tasks.map(task => (\r\n            <li\r\n                key={task.id}\r\n                className={`tasks__item ${task.done && hideDone ? \"tasks__item--hidden\" : \"\"}`}>\r\n                <button className=\"tasks__button tasks__button--toggleDone\" onClick={() => toggleTaskDone(task.id)}>\r\n                    {task.done ? \"âœ”\" : \"\"}\r\n                </button>\r\n                <span className={`tasks__content${task.done ? \" tasks__content--done\" : \"\"}`}>\r\n                    {task.content}\r\n                </span>\r\n                <button className=\"tasks__button tasks__button--remove\" onClick={() => removeTask(task.id)}>\r\n                    ðŸ—‘\r\n                </button>\r\n            </li>\r\n        ))}\r\n    </ul >\r\n);\r\n\r\nexport default Tasks","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    <div className=\"buttons\">\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <button onClick={toggleHideDone} className=\"buttons__button\">\r\n                    {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n                </button>\r\n                <button\r\n                onClick={setAllDone}\r\n                    className=\"buttons__button\"\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    UkoÅ„cz wszystkie\r\n                </button>\r\n            </>\r\n        )}\r\n    </div>\r\n);\r\n\r\nexport default Buttons","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <section className=\"section\">\r\n        <header className=\"section__header\">\r\n            <h3 className=\"section__title\">{title}</h3>\r\n            {extraHeaderContent}\r\n        </header>\r\n        <div className=\"section__body\">\r\n            {body}\r\n        </div>\r\n    </section >\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({children}) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import React, { useEffect, useState } from 'react';\nimport Form from './Form';\nimport Tasks from './Tasks';\nimport Buttons from './Buttons';\nimport Section from './Section';\nimport Header from './Header';\nimport Container from './Container';\n\nconst getInitialTasks = () => {\n  const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\n\n  return tasksFromLocalStorage\n    ? JSON.parse(tasksFromLocalStorage)\n    : [];\n};\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState(getInitialTasks);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n\n      return task\n    }));\n  }\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      },\n    ]);\n  }\n\n  return (\n    <Container>\n      <Header title=\"Lista zadaÅ„\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n\n      <Section\n        title=\"Lista zadaÅ„\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}